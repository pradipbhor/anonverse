server {
    listen 80;
    server_name localhost;

    root /usr/share/nginx/html;
    index index.html;

    # -------------------------
    # Static assets (JS, CSS, images, fonts)
    # -------------------------
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff;

        # CORS for fonts
        location ~* \.(woff|woff2|ttf|eot)$ {
            add_header Access-Control-Allow-Origin *;
        }
    }

    # -------------------------
    # Service worker
    # -------------------------
    location /service-worker.js {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
    }

    # -------------------------
    # Manifest & PWA metadata
    # -------------------------
    location ~* \.(webmanifest|manifest\.json)$ {
        expires 1h;
        add_header Cache-Control "public";
    }

    # -------------------------
    # API Proxy (Optional: only if you use API requests like /api/* from frontend)
    # -------------------------
    location /api/ {
        proxy_pass http://backend:5000;  # 'backend' is the name of your backend service in docker-compose
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Optional: CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
        add_header Access-Control-Allow-Credentials true always;

        if ($request_method = OPTIONS) {
            return 204;
        }
    }

    # -------------------------
    # WebSocket Proxy (e.g., for Socket.IO)
    # -------------------------
    location /socket.io/ {
        proxy_pass http://backend:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
    }

    # -------------------------
    # Health check endpoint
    # -------------------------
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # -------------------------
    # React/Vite SPA fallback (for client-side routing)
    # -------------------------
    location / {
        try_files $uri $uri/ /index.html;

        # Cache control for HTML
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
    }

    # -------------------------
    # Security headers
    # -------------------------
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy strict-origin-when-cross-origin always;

    # Content Security Policy (adjust as needed)
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:;" always;

    # -------------------------
    # Hide server version
    # -------------------------
    server_tokens off;

    # -------------------------
    # Block dotfiles
    # -------------------------
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # -------------------------
    # Block backup files
    # -------------------------
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;

    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
